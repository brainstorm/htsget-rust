/* 
 * htsget
 *
 * This data retrieval API bridges from existing genomics bulk data transfers to a client/server model
 *
 * OpenAPI spec version: 1.1.1
 * Contact: security-notification@ga4gh.org
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct DefaultApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> DefaultApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> DefaultApiClient<C> {
        DefaultApiClient {
            configuration: configuration,
        }
    }
}

pub trait DefaultApi {
    fn search_read_id(&self, id: &str, format: &str, reference_name: &str, start: i64, end: i64, fields: &str, tags: &str, notags: &str) -> Box<Future<Item = ::models::HtsgetResponse, Error = Error<serde_json::Value>>>;
    fn search_variant_id(&self, id: &str, format: &str, reference_name: &str, start: i64, end: i64, fields: &str, tags: &str, notags: &str) -> Box<Future<Item = ::models::HtsgetResponse, Error = Error<serde_json::Value>>>;
}


impl<C: hyper::client::Connect>DefaultApi for DefaultApiClient<C> {
    fn search_read_id(&self, id: &str, format: &str, reference_name: &str, start: i64, end: i64, fields: &str, tags: &str, notags: &str) -> Box<Future<Item = ::models::HtsgetResponse, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/reads/{id}".to_string())
            .with_auth(__internal_request::Auth::Oauth)
            .with_query_param("format".to_string(), format.to_string())
            .with_query_param("referenceName".to_string(), reference_name.to_string())
            .with_query_param("start".to_string(), start.to_string())
            .with_query_param("end".to_string(), end.to_string())
            .with_query_param("fields".to_string(), fields.to_string())
            .with_query_param("tags".to_string(), tags.to_string())
            .with_query_param("notags".to_string(), notags.to_string())
            .with_path_param("id".to_string(), id.to_string())
            .execute(self.configuration.borrow())
    }

    fn search_variant_id(&self, id: &str, format: &str, reference_name: &str, start: i64, end: i64, fields: &str, tags: &str, notags: &str) -> Box<Future<Item = ::models::HtsgetResponse, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/variants/{id}".to_string())
            .with_auth(__internal_request::Auth::Oauth)
            .with_query_param("format".to_string(), format.to_string())
            .with_query_param("referenceName".to_string(), reference_name.to_string())
            .with_query_param("start".to_string(), start.to_string())
            .with_query_param("end".to_string(), end.to_string())
            .with_query_param("fields".to_string(), fields.to_string())
            .with_query_param("tags".to_string(), tags.to_string())
            .with_query_param("notags".to_string(), notags.to_string())
            .with_path_param("id".to_string(), id.to_string())
            .execute(self.configuration.borrow())
    }

}
