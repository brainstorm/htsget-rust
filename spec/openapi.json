{
  "openapi" : "3.0.0",
  "info" : {
    "title" : "htsget",
    "description" : "This data retrieval API bridges from existing genomics bulk data transfers to a client/server model",
    "contact" : {
      "name" : "GA4GH",
      "email" : "security-notification@ga4gh.org"
    },
    "license" : {
      "name" : "GPLv3"
    },
    "version" : "1.1.1"
  },
  "servers" : [ {
    "url" : "https://virtserver.swaggerhub.com/brainkod/htsget/1.1.1",
    "description" : "htsget genomics api"
  } ],
  "paths" : {
    "/reads/{id}" : {
      "get" : {
        "summary" : "Gets the reads from a pre-indexed id",
        "description" : "Searches a pre-indexed object id.\n",
        "operationId" : "searchReadId",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "identifier of the read object",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "format",
          "in" : "query",
          "description" : "File format, BAM (default), CRAM.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "BAM"
        }, {
          "name" : "referenceName",
          "in" : "query",
          "description" : "VReference sequence name",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "chr1"
        }, {
          "name" : "start",
          "in" : "query",
          "description" : "The start position of the range on the reference, 0-based, inclusive.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "minimum" : 0,
            "type" : "integer",
            "format" : "int64"
          },
          "example" : "12312"
        }, {
          "name" : "end",
          "in" : "query",
          "description" : "The end position of the range on the reference, 0-based exclusive.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "minimum" : 0,
            "type" : "integer",
            "format" : "int64"
          },
          "example" : "99999"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "A list of fields to include, such as QNAME, FLAG, RNAME, etc...",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "QNAME", "FLAG", "RNAME", "POS", "MAPQ", "CIGAR", "RNEXT", "PNEXT", "TLEN", "SEQ", "QUAL" ]
          },
          "example" : "fields=QNAME,RNAME"
        }, {
          "name" : "tags",
          "in" : "query",
          "description" : "A comma separated list of tags to include, by default all.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "cancer,melanoma"
        }, {
          "name" : "notags",
          "in" : "query",
          "description" : "A comma separated list of tags to exclude, default none.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "normal,healthy"
        } ],
        "responses" : {
          "200" : {
            "description" : "results matching criteria",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/readIdResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "something went wrong",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponses"
                }
              }
            }
          },
          "500" : {
            "description" : "Unexpected error"
          }
        },
        "security" : [ {
          "htsget_auth" : [ "read:genomic_reads" ]
        } ]
      }
    },
    "/variants/{id}" : {
      "get" : {
        "summary" : "Gets the variants from a pre-indexed id",
        "description" : "Searches a pre-indexed object id.\n",
        "operationId" : "searchVariantId",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "identifier of the variant object",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "format",
          "in" : "query",
          "description" : "File format, VCF (default), BCF.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "VCF"
        }, {
          "name" : "referenceName",
          "in" : "query",
          "description" : "VReference sequence name",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "chr1"
        }, {
          "name" : "start",
          "in" : "query",
          "description" : "The start position of the range on the reference, 0-based, inclusive.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "minimum" : 0,
            "type" : "integer",
            "format" : "int64"
          },
          "example" : "12312"
        }, {
          "name" : "end",
          "in" : "query",
          "description" : "The end position of the range on the reference, 0-based exclusive.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "minimum" : 0,
            "type" : "integer",
            "format" : "int64"
          },
          "example" : "99999"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "A list of variant fields to include, such as INFO, SAMPLE, FORMAT, etc.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "INFO", "SAMPLE", "FILTER", "FORMAT", "ALT" ]
          },
          "example" : "fields=INFO,SAMPLE"
        }, {
          "name" : "tags",
          "in" : "query",
          "description" : "A comma separated list of tags to include, by default all.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "cancer,melanoma"
        }, {
          "name" : "notags",
          "in" : "query",
          "description" : "A comma separated list of tags to exclude, default none.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "normal,skin"
        } ],
        "responses" : {
          "200" : {
            "description" : "results matching criteria",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/variantIdResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "something went wrong",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponses"
                }
              }
            }
          },
          "500" : {
            "description" : "Unexpected error"
          }
        },
        "security" : [ {
          "htsget_auth" : [ "read:genomic_variants" ]
        } ]
      }
    }
  },
  "components" : {
    "schemas" : {
      "readIdResponse" : {
        "$ref" : "#/components/schemas/htsgetResponse"
      },
      "variantIdResponse" : {
        "$ref" : "#/components/schemas/htsgetResponse"
      },
      "htsgetResponse" : {
        "type" : "object",
        "properties" : {
          "htsget" : {
            "$ref" : "#/components/schemas/htsgetResponse_htsget"
          }
        }
      },
      "htsgetUrlsHeaders" : {
        "type" : "array",
        "example" : [ {
          "url" : "data:application/vnd.ga4gh.bam;base64,QkFNAQ=="
        }, {
          "url" : "data:application/vnd.ga4gh.vcf;base64,QkFNAQ==",
          "headers" : {
            "Authorization" : "Bearer xxxxx",
            "Range" : "bytes=65536-1003750"
          }
        } ],
        "items" : {
          "$ref" : "#/components/schemas/urlsItems"
        }
      },
      "urlsItems" : {
        "required" : [ "url" ],
        "type" : "object",
        "properties" : {
          "url" : {
            "type" : "string"
          },
          "headers" : {
            "type" : "object"
          }
        }
      },
      "errorResponses" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/UnsupportedFormat"
        }, {
          "$ref" : "#/components/schemas/InvalidInput"
        }, {
          "$ref" : "#/components/schemas/InvalidRange"
        } ]
      },
      "UnsupportedFormat" : {
        "description" : "The requested file format is not supported by the server"
      },
      "InvalidInput" : {
        "description" : "The request parameters do not adhere to the specification"
      },
      "InvalidRange" : {
        "description" : "The requested range cannot be satisfied"
      },
      "htsgetResponse_htsget" : {
        "type" : "object",
        "properties" : {
          "format" : {
            "type" : "string",
            "example" : "BAM"
          },
          "urls" : {
            "$ref" : "#/components/schemas/htsgetUrlsHeaders"
          },
          "md5" : {
            "type" : "string",
            "example" : "8a6049fad4943ff4c6de5c22df97d001"
          }
        }
      }
    },
    "securitySchemes" : {
      "htsget_auth" : {
        "type" : "oauth2",
        "flows" : {
          "authorizationCode" : {
            "authorizationUrl" : "https://example.com/api/oauth/dialog",
            "tokenUrl" : "https://example.com/api/oauth/token",
            "scopes" : {
              "read:genomic_reads" : "read access to genomic reads",
              "read:genomic_variants" : "read access to genomic variants"
            }
          }
        }
      }
    }
  }
}